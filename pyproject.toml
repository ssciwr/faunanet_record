[project]
name = "faunanet_record"
version = "0.1"
requires-python = ">= 3.9"
authors = [
    { name = "Harald Mack", email = "harald.mack@iwr.uni-heidelberg.de" },
    { name = "Inga Ulusoy", email = "inga.ulusoy@uni-heidelberg.de" },
]
description = "Audio Recording Facilities for the faunanet package"
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Operating System :: Linux",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
]

dependencies = [
    "numpy",
    "librosa",
    "PyYAML",
    "wave",
    "pyaudio",
    "platformdirs",
    "click",
]

[project.optional-dependencies]
dev = ["pytest", "pytest-cov", "coverage"]

[project.urls]
Repository = "https://github.com/ssciwr/iSparrowRecord"
Issues = "https://github.com/ssciwr/iSparrowRecord/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

# Tools 
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-v -x"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["./src/faunanet_record"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
fail_under = 80

[tool.coverage.html]
directory = "coverage_html_report"

[project.scripts]
faunanet_record = "faunanet_record.cli:cli"
